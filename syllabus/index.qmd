---
title: E85 Syllabus
format:
  html: default
---

## Teaching Team

| Item                   | Information                                          |
|-----------------------|-------------------------------------------------|
| Instructors            | Prof. Josh Brake, Prof. Tina Smilkstein              |
| Tutoring & Tau Beta Pi | Kevin Kim, Allison Marten, Noah Limpert, Zoe Worrall |

## Schedule

| **Name**     | **Info**          | Location           |
|--------------|-------------------|--------------------|
| Lecture      | MW 2:45 - 4:00 pm | Beckman Hall, B126 |
| Office Hours | W 10:30-11:30a    | Digital Lab        |

"Office hours" is code for "come hang out." You are encouraged to attend office hours to ask questions, get help with your labs, talk about careers and graduate school, or chat about something on your mind (whether it is related to this class, academics, or anything else). I am available more often than not, so try dropping me a line via Discord or email if you are having a problem with your lab or want to set up a time. You may also contact the lab assistant(s) for questions when I am not available.

## Text

Harris & Harris, *Digital Design and Computer Architecture, RISC-V Ed.*, Morgan Kaufmann 2021.

## Electronic Communication

|                 |                                          |
|-----------------|------------------------------------------|
| Web page:       | <http://pages.hmc.edu/brake/class/e85/>  |
| Email list:     | eng-85 \[at\] g.hmc.edu                  |
| Discord Server: | See course introductory email for invite |

Be sure to join the class Discord and check it regularly as it will be the main source of course-related communication for this semester.

### Communication Policy

Please note that I do not always respond immediately to messages. In particular I typically do not check email or Discord between 6:00 pm and 6:00 am on weeknights, and I typically do not check these at all on weekends.

That said,

-   Messages sent on a weekday (Monday-Friday) before 4:00 pm PT will get a response the same day.
-   Messages sent after 4:00 pm PT Monday-Thursday will get a response the next day.
-   Messages sent after 4:00 pm PT on Fridays or on the weekend will get a response the following Monday.

## Lab

### Lab Kits

E85 lab kits include a microcontroller board, breadboard, and various components. The Engineering Department has partially subsidized the kits so your cost is \$70. To purchase a board, complete this [E85 Kit Payment Form](https://docs.google.com/forms/d/e/1FAIpQLScJ7J9h97xHiba5nPAz7oITb7DErtLyiJR1QkZR2WEYhWmwQA/viewform) below and then go to the stockroom to pick the board up. If the kit fee presents a financial hardship, complete the [E85 Kit Payment Waiver Request](https://docs.google.com/forms/d/e/1FAIpQLScXPe7jHqtP8z8OSSCIPlme0QFUVC29oqA2fgMhRT-cAWqZtQ/viewform); waivers are handled by the staff and are never seen by the instructor.

### Software Requirements

You can do your lab assignments on the computers in the Digital Lab in the Parsons basement, or on your own computer. You will be using ModelSim-Intel(R), which runs on Windows and Linux. For Mac users, it will also run in a virtual machine installation of Windows using Parallels, VM Fusion, or VirtualBox. For the second half of the class, you'll also be using SEGGER Embedded Studio, which runs on Windows, Mac, and Linux.

To install ModelSim, navigate to the [download page](https://www.intel.com/content/www/us/en/software-kit/750666/modelsim-intel-fpgas-standard-edition-software-version-20-1-1.html) on Intel's website to download the most recent version of the ModelSim software. The latest release as of this writing is 20.1.1.

If you're unable to access ModelSim in the digital lab or on your own computer, reach out to an instructor to discuss potential workarounds.

## Course Learning Objectives

Digital systems have revolutionized our world. From television to cell phones to GPS to warfare to medicine to automobiles, computers and digital processing have reshaped the way we live and work. Computers are also a vital part of daily practice in every field of science and engineering.

Previous generations of engineers learned the "nuts and bolts" of the profession by doing things like disassembling and rebuilding engines. As technology has advanced, cars have become too complicated for the layperson to work on. Ironically, the same advances have made computers much easier to build. While most fields of engineering require extensive mathematics and complicated analysis of even rather simple components, digital systems merely require counting from 0 to 1. Their challenge, instead, is in combining many simple building blocks into a complex whole. Field programmable gate arrays (FPGAs), containing the equivalent of thousands or millions of logic gates, make it possible to build these complex systems in the lab without the tedium of manually connecting components. In this class, you will build your own microprocessor and test it on a FPGA. In the process, you will master the art and science of digital design. You will learn to speak to and control processors in their native tongue, assembly language. And you will put all the pieces together to demystify how a computer works.

As you probably know, very few complex systems work the first time you put them together. Engineers must become good at systematically and efficiently debugging their creations. One of the course objectives that can be frustrating but vitally important is to learn to teach yourself professional-strength computer-aided design tools and to use these tools to debug systems.

By the end of this course, you should be able to:

-   Build digital systems at levels of abstraction from transistors through circuits and logic.
-   Manage complexity using the digital abstraction, static and dynamic disciplines, and hierarchical design.
-   Design and implement combinational and sequential digital circuits using schematics and hardware description languages.
-   Analyze and trade off performance, cost,Â and power consumption of digital circuits.
-   Begin the practice of implementing and debugging digital systems with appropriate lab techniques including breadboarding and interpreting datasheets.
-   Simulate digital circuits

## Grading

| Item             | Weight |
|------------------|--------|
| Lecture Practice | 5%     |
| Class Activities | 5%     |
| Labs             | 30%    |
| Problem Sets     | 25%    |
| Exams            | 35%    |

Solutions to the labs and problem sets from previous semesters are undoubtedly floating around campus and on the web. You may **not** refer to solutions while doing the assignments; they must be your own work.

## Course Policies

### Deadlines

Assignment deadlines are shown on the Dates tab of the MOOC. Assignments are due at 23:10 UTC, which is 4:10 or 3:10 pm depending on daylight savings time.

### Drops and Deadline Flexibillity

Your lowest problem set and lab grade of the semester will each be dropped, as will your three lowest lecture practice assignments. The dropped lab and problem set are intended to accommodate illness, travel, and personal emergencies. However, if you have already used your drop and need flexibility on a second lab or problem set, please contact the instructor at least two days in advance for an extension. The class moves quickly and it is difficult to catch up if you fall behind. Handling extensions in the MOOC is cumbersome, so late lecture practice questions are not accepted.

Based on last year's experience, it is likely that multiple people in the class will experience prolonged illness and/or mental health challenges during these difficult times. If you find yourself in this circumstance, please reach out to the Academic Deans as soon as you can. They are great advocates who can help arrange flexibility across your multiple classes. E85 will make unusual accommodations as needed in such circumstances. The sooner you report a problem, the more likely it is that the deans can help you find a graceful solution.

### Collaboration Policy

You are welcome to discuss labs and problem sets with other students or with the instructor or lab assistants or tutors **after you have made an effort by yourself**. However, you must turn in your own work, not work identical to that of another student. For labs, asking classmates or tutors for help when you are stuck on a specific issue is encouraged (especially on difficulties with the tools and equipment), but sitting at adjacent computers and working through the lab together in lock-step is specifically prohibited. Pair/group programming is also prohibited. **It is an honor code violation to simply copy someone else's work.**

### AI Policy

AI tools like ChatGPT are an emerging and active area of research. Following the public release of ChatGPT in late 2022, large language models (LLMs) hit the mainstream and have been the subject of robust conversations about how educators and students should approach these tools. AI tools, whether in the form of an LLM or something else, are likely to have an impact on your career and work as an engineer. In this class, we will be approaching AI tools with a posture of cautious engagement. The guiding principle for the use of AI tools is that these tools must be used in the spirit of the assignment.

To frame the discussion about AI in this class, here are three general ways that educators are approaching AI use in their classes[^1]:

[^1]: See [this article](https://marcwatkins.substack.com/p/have-an-ai-policy-so-does-everyone) from [Marc Watkins](https://marcwatkins.org) for a more in-depth discussion.

1.  Ban
2.  Embrace
3.  Critical exploration

Each of these approaches has its merits in specific circumstances. The key is to ensure that the use of the tool is aligned with the overarching learning outcomes of the course or assignment. There are some instances where AI use is not aligned with learning. For example, it is important to understand the fundamentals of how to write accurate code in a Hardware Description Language (HDL) such as the SystemVerilog language we will learn in this class. Relying on a Large Language Model (LLM) like ChatGPT to write the code for you will supplant rather than support your ability to understand the important concepts for designing digital systems. Not to mention that ChatGPT, based on my experience, [writes really bad HDL](https://chat.openai.com/share/fc5e04e7-f19b-4aec-90b2-0b3a302f41f0)![^2]

[^2]: This makes sense because most of the HDL code you find on the internet is pretty lousy. Garbage in, garbage out.

There are other instances where an embrace of AI is worth considering. Maybe after building your own general understanding of SystemVerilog you want to experiment with an LLM to see if it can generate a template design that you can slightly modify for a new design. In this situation, the LLM is acting more like an advanced auto-complete tool. The key is that **you** possess the expertise to be able to understand and analyze whether the output is correct. In the spirit of full embrace, you may try to have an LLM write your code for you, comment your code, or write descriptions of what the code is doing. Embracing the AI tool full on will help you to quickly generate text, but the quality of the output may end up being incorrect or of poor quality. User beware.

The third approach is in the middle of the previous two, approaching AI tools like LLMs with a cautious optimism and an eye towards reflection. Here, a user embraces the tool and engages their curiosity to prototype new ways in which the tool might be useful but is continually asking questions and reflecting on the approach and how the design of the tools influences the applications for which they are well suited. By diving deeply into how these tools work, analyzing their areas of strength and weakness, and experimenting with them with an attitude of critical curiosity, one can learn how these tools might be a valuable tool in the toolkit and other situations when they are best avoided. This approach also opens up space to ask questions about the array of ethical issues that must be discussed, including but not limited to: data privacy concerns, the environmental impacts of training these systems, alignment of AI tools with human values, bias, and the potentially dangerous ways in which these tools can be used.

My own approach to AI use is that when we choose to use it, we should be using it as a [ladder and not a crutch](https://joshbrake.substack.com/p/reframing-the-disruption-of-chatgpt?utm_source=%2Fsearch%2Fladder%2520crutch&utm_medium=reader2). If and when we choose to use AI tools we should use it to extend our abilities but not in a way that might create unhealthy dependencies on it (e.g., not learning foundational programming concepts because ChatGPT can write the code for you). If you use AI tools in an unhealthy way, you are likely to be doing yourself more harm than good. In this vein, it is similar to other forms of academic dishonesty that supplant the learning intended as part of a given assignment or assessment.

If you have any questions or are curious about exploring AI tools in this class, please reach out and ask. Our default posture will be the third approach of reflective engagement. In most instances this means that we will avoid the use of these tools since they will often be in direct opposition to the goals of learning the fundamental concepts. If you would like to use these tools in an assignment, please reach out to me and I would be happy to talk with you about it. In general you will be required to submit a quick justification of

1.  What you would like to use the tool for
2.  Why you think the use of AI is aligned with and not opposed to the learning goals of the assignment
3.  A short reflection, submitted with the assignment, on your experience using AI on the assignment and what you learned

## Schedule

Readings for each lecture are listed on the schedule below. Many students say they have found the readings valuable and enjoyable. You'll get the most out of the class if you read the sections in advance of the class time and come with questions, and then reread as necessary when you work your problem sets and labs.

This class is flipped in that you will see the content first in the MOOC and then work examples in class.Â  The examples are intended to reflect the concepts you need for the problem sets and labs, and previous semester students said that the time spent attending class generally is more than compensated by a reduction in time on the assignments.Â You will receive 5% of your grade to incentivize participating in the in-class activities. If you are feeling ill or are concerned you may have been exposed to COVID, please do not come to class. Contact the instructor(s) and you will get participation credit.

| Lecture | Date   | MOOC Topics Due                         | Class Activity          | Readings          | Assignment                   |
|------------|------------|------------|------------|------------|------------|
| `0`     | 28-Aug | Introduction                            | Welcome: numbers        | 1.1-1.5           |                              |
| `1`     | 30-Aug | Gates                                   | Soldering (Digital Lab) | 1.6-1.9, A1-A7    |                              |
|         | 4-Sep  | Labor Day (No class)                    |                         |                   |                              |
| `10`    | 6-Sep  | Combinational logic design              | Datasheets & Circuits   | 2.1-2.8           | PS 1 due                     |
| `11`    | 11-Sep | Timing, sequential circuits             | Logic Design            | 2.9-2.10, 3.1-3.2 | Lab 1 due Digital Circuits   |
| `100`   | 13-Sep | Finite state machines                   | FSM Design              | 3.3-3.4           | PS 2 due                     |
| `101`   | 18-Sep | Dynamic discipline, metastability       | Timing Optimization     | 3.5-3.7           | Lab 2 due Comb Logic         |
| `110`   | 20-Sep | Verilog, Part I                         | Verilog FSM             | 4.1-4.3           | PS 3 due                     |
| `111`   | 25-Sep | Verilog, Part II                        | Verilog to Schematics   | 4.4-4.10          | Lab 3 due Structural FSM     |
| `1000`  | 27-Sep | Arithmetic circuits                     | Block Design            | 5.1-5.2           | PS 4 due                     |
| `1001`  | 2-Oct  | Fixed and floating-point numbers        | Number Examples         | 5.3               | Lab 4 due Behavioral FSM     |
| `1010`  | 4-Oct  | Sequential building blocks, arrays      | Sequential Examples     | 5.4-5.7           | PS 5 due                     |
| `1011`  | 9-Oct  | Midterm Review                          | Midterm Review          |                   | Lab 5 due Multicycle Control |
|         | 11-Oct | No Class                                |                         |                   | Midterm                      |
|         | 16-Oct | Fall Break                              |                         |                   |                              |
| `1100`  | 18-Oct | C Programming                           | C Examples              | C.1-C.7           |                              |
| `1101`  | 23-Oct | C Programming                           | C Examples              | C.8-C.11          |                              |
| `1110`  | 25-Oct | Microcontrollers: Memory-mapped I/O     | SEGGER Embedded Studio  | 9.1-9.3.3         | PS 6 due                     |
| `1111`  | 30-Oct | Parallel & serial interfacing, ADCs     | Lights & Switches       | 9.3               | Lab 6 due C Programming      |
| `10000` | 1-Nov  | I/O libraries and examples              | SPI Accelerometer       | 9.3               | PS 7 due                     |
| `10001` | 6-Nov  | Assembly language                       | Assembly Examples       | 6.1-6.3.6         | Lab 7 due Simon              |
| `10010` | 8-Nov  | Function calls, machine language        | Assembly Functions      | 6.3.7-6.9         |                              |
| `10011` | 13-Nov | Single-cycle processor datapath         | Pulse Width Modulation  | 7.1-7.3.1         | Lab 8 due SPI                |
| `10100` | 15-Nov | Single-cycle processor control, Verilog | Sidewalk Processor      | 7.3, 7.6          | PS 8 due                     |
| `10101` | 20-Nov | Multicycle processor                    | Multicycle Processor    | 7.4               | Lab 9 due Sound & Light      |
|         | 22-Nov | Thanksgiving                            |                         |                   |                              |
| `10110` | 27-Nov | Pipelining                              | Hazards, add instrs     | 7.5.1-2           | PS 9 due                     |
| `10111` | 29-Dec | Advanced architecture: a sampler        | Free time for Lab 10    | 7.7               |                              |
| `11000` | 4-Dec  | Advanced RISC-V Features                | Processor Hall of Fame  |                   | PS 10 due                    |
| `11001` | 6-Dec  | Class summary and review                | Final Review            |                   | Lab 10 due Multicycle CPU    |
|         | 15-Dec | Take home exam due 11:59 pm                 |                         |                   |                              |

## Honor Code Violations

Students in this class are expected to follow the HMC honor code. An honor code policy appears below and prescribes behavior that is considered honorable, so read those maxims and follow them closely. Any honor code violations will be handled through JB.

## Honor Code Policy

1.  All students enrolled in this course are bound by the HMC Honor Code. More information on the HMC Honor Code can be found in the HMC Student Handbook.
2.  It is your responsibility to determine whether your actions adhere to the HMC Honor Code. If this document does not clarify the legitimacy of a particular action, you should contact the course instructor and request clarification.
3.  Work you submit for individual assignments should be your own, and you should complete all assignments based on your own understanding of the underlying material. If you work with, or receive help from, another individual on an assignment, provide a written acknowledgement in complete sentences that includes the person's name and the nature of the help.
4.  This document is not meant to be an exhaustive list of every possible Honor Code violation. Infractions not explicitly mentioned here may still violate the Honor Code.
5.  **Boundaries of Collaboration** Verbal collaboration with other students on individual assignments is encouraged AFTER you have given serious thought to each component yourself. However, all submitted written work should be written by yourself individually, and not a collaborative effort or copied from a common source (e.g., a chalkboard). It is NOT acceptable to work on labs in lockstep with another classmate.
6.  **Use of Computer Software** The use of graphing calculators and computer software to aid in course work is acceptable, as long as it does not substitute for an understanding of the course material.
7.  **Use of Web Resources** The use of Internet resources to aid in course work is acceptable, as long it does not substitute for an understanding of the course material. Plagiarism and direct copying from online (or any other) sources is strictly prohibited.
8.  **Use of Your Own Work from Previous Semesters** If you have previously attempted this course, you may resubmit your work from previous semesters as this semester's coursework, as long as you understand the underlying material.
9.  **Use of Other Course Resources from Previous Semesters** You may not reference assignments (labs, problem sets, activities) of this course from previous semesters.
10. **Retention of Course Resources** Assignments and exams from this course may not be committed to dorm repositories or otherwise used to help future students.

## Inclusiveness and Harassment

We do difficult work in this class and everyone should feel comfortable engaging with the material. We explicitly want you to feel safe doing this work, so it is worth stating that the instructors are committed to making the class a safe space for everyone regardless of race, gender, ethnicity, sexual orientation, religion, and academic history. If you feel that you are experiencing a hostile environment, speak to an instructor immediately.

## Educational Accessibility

HMC is committed to providing an inclusive learning environment and support for all students. Students with a disability (including mental health, chronic or temporary medical conditions) who may need some accommodation in order to fully participate in this class are encouraged to contact Educational Accessibility Services at [ability\@g.hmc.edu](mailto:ability@g.hmc.edu) to request accommodations. Students from the other Claremont Colleges should contact their home college's disability resources officer.